/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

/*Service worker handling the push events. Recieves data from server as string and parses it to json to send data*/
self.addEventListener("install", (e) => {
  self.skipWaiting();
});
self.addEventListener("activate", (e) => {
  self.clients.claim().then(() => {});
});
self.addEventListener("push", (e) => {
  const data = e.data.json();
  let body, icon, title;
  if (data.test) {
    body = "ThankYou for subscribing us.\n\n WeatherApp";
    icon = "./logo192.png";
    title = "";
  } else {
    body = `${data.name}:Feels like ${data.feelslike}째C\nTemp:${data.temperature}째C  Min/Max:${data.min}째C/${data.max}째C\n${data.desc}\n\nWeatherApp`;
    icon = data.icon;
    title = "Today's Weather";
  }
  e.waitUntil(
    self.registration.showNotification(
      title, // title of the notification
      {
        body: body, //body
        icon: icon, //notification icon preset from server
        data: "WeatherData",
        actions: [
          {
            //action to open the website
            action: "Open",
            title: "Open in App",
            icon: "icon.png",
          },
        ],
      }
    )
  );
});

//Service worker handling notification click event. Uses self.clients to open the window.
self.addEventListener("notificationclick", function (event) {
  event.notification.close();
  self.clients.openWindow("https://weather-app-1251.vercel.app/");
});

//Service worker handling the fetch events having openweathermapapi. It fetches rhe new data and puts it in the cache
self.addEventListener("fetch", (e) => {
  if (e.request.mode === "cors") {
    if (e.request.url.includes("api.openweathermap.org")) {
      e.respondWith(fetching(e));
    }
  }

  async function fetching(e) {
    const cache = await caches.open("v1");
    const resp = await fetch(e.request.url);
    await cache.put(e.request.url, resp.clone());
    return resp;
  }
});
